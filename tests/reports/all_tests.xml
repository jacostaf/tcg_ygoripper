<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="7" skipped="0" tests="299" time="24.843" timestamp="2025-07-16T22:18:50.345383" hostname="Joses-MacBook-Air.local"><testcase classname="tests.integration.test_integration.TestDatabaseIntegration" name="test_database_service_integration" time="0.021" /><testcase classname="tests.integration.test_integration.TestCardSetServiceIntegration" name="test_fetch_and_cache_card_sets" time="0.008" /><testcase classname="tests.integration.test_integration.TestCardSetServiceIntegration" name="test_search_cached_card_sets" time="0.004" /><testcase classname="tests.integration.test_integration.TestPriceScrapingIntegration" name="test_price_scraping_with_cache" time="0.016"><failure message="assert False is True">self = &lt;test_integration.TestPriceScrapingIntegration object at 0x105a6f750&gt;
mock_variants_collection = &lt;MagicMock name='get_card_variants_collection' id='4394726608'&gt;
mock_cache_collection = &lt;MagicMock name='get_price_cache_collection' id='4394726944'&gt;
mock_requests_get = &lt;MagicMock name='get' id='4394727280'&gt;

    @patch("ygoapi.price_scraping.requests.get")
    @patch("ygoapi.price_scraping.get_price_cache_collection")
    @patch("ygoapi.price_scraping.get_card_variants_collection")
    def test_price_scraping_with_cache(
        self, mock_variants_collection, mock_cache_collection, mock_requests_get
    ):
        """Test price scraping with database cache integration."""
        # Setup mock cache collection (no cached data initially)
        mock_cache_collection.find_one.return_value = None
        mock_cache_collection.update_one.return_value = Mock(modified_count=1)
    
        # Setup mock variants collection for rarity validation - CRITICAL FIX
        # The service expects to find a variant with matching card_number AND card_rarity
        mock_variants_collection.find_one.return_value = {
            "card_number": "LOB-001",
            "card_rarity": "Ultra Rare",  # Must match exactly what we're testing
            "card_name": "Blue-Eyes White Dragon",
            "set_code": "LOB"
        }
    
        # Setup mock TCGPlayer response
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = """
        &lt;html&gt;
        &lt;div class="price-point__data"&gt;$25.99&lt;/div&gt;
        &lt;div class="price-point__data"&gt;$24.50&lt;/div&gt;
        &lt;/html&gt;
        """
        mock_requests_get.return_value = mock_response
    
        # Test price scraping integration
        service = PriceScrapingService()
        result = service.scrape_card_price(
            card_number="LOB-001",
            card_name="Blue-Eyes White Dragon",
            card_rarity="Ultra Rare",
        )
    
&gt;       assert result["success"] is True
E       assert False is True

tests/integration/test_integration.py:161: AssertionError</failure></testcase><testcase classname="tests.integration.test_integration.TestPriceScrapingIntegration" name="test_cache_retrieval_integration" time="0.006"><failure message="assert None is not None">self = &lt;test_integration.TestPriceScrapingIntegration object at 0x105a6fb10&gt;
mock_cache_collection = &lt;MagicMock name='get_price_cache_collection' id='4394295920'&gt;

    @patch("ygoapi.price_scraping.get_price_cache_collection")
    def test_cache_retrieval_integration(self, mock_cache_collection):
        """Test price cache retrieval integration."""
        # Setup mock cached data
        cached_data = {
            "card_number": "LOB-001",
            "card_name": "Blue-Eyes White Dragon",
            "card_rarity": "Ultra Rare",
            "tcgplayer_price": 25.99,
            "last_price_updt": datetime.now(timezone.utc),
        }
        mock_cache_collection.find_one.return_value = cached_data
    
        service = PriceScrapingService()
        result = service.find_cached_price_data("LOB-001", "Blue-Eyes White Dragon", "Ultra Rare")
    
&gt;       assert result is not None
E       assert None is not None

tests/integration/test_integration.py:183: AssertionError</failure></testcase><testcase classname="tests.integration.test_integration.TestEndToEndIntegration" name="test_complete_workflow_integration" time="0.269" /><testcase classname="tests.integration.test_integration.TestEndToEndIntegration" name="test_health_check_integration" time="0.237" /><testcase classname="tests.integration.test_integration.TestErrorHandlingIntegration" name="test_service_error_propagation" time="0.226" /><testcase classname="tests.integration.test_integration.TestErrorHandlingIntegration" name="test_price_scraping_error_handling" time="0.308" /><testcase classname="tests.integration.test_integration.TestConcurrentOperations" name="test_concurrent_cache_access" time="0.005" /><testcase classname="tests.integration.test_integration.TestConcurrentOperations" name="test_concurrent_api_requests" time="0.240" /><testcase classname="tests.integration.test_integration.TestDataFlow" name="test_card_set_data_flow" time="0.006" /><testcase classname="tests.integration.test_integration.TestDataFlow" name="test_price_data_flow" time="0.010"><failure message="assert False is True">self = &lt;test_integration.TestDataFlow object at 0x105b54550&gt;
mock_variants_collection = &lt;MagicMock name='get_card_variants_collection' id='4571252448'&gt;
mock_cache_collection = &lt;MagicMock name='get_price_cache_collection' id='4571378224'&gt;
mock_requests_get = &lt;MagicMock name='get' id='4571380912'&gt;

    @patch("ygoapi.price_scraping.requests.get")
    @patch("ygoapi.price_scraping.get_price_cache_collection")
    @patch("ygoapi.price_scraping.get_card_variants_collection")
    def test_price_data_flow(
        self, mock_variants_collection, mock_cache_collection, mock_requests_get
    ):
        """Test price data flow from scraping to cache to retrieval."""
        # Setup variant validation
        mock_variants_collection.find_one.return_value = {
            "card_number": "LOB-001",
            "card_rarity": "Ultra Rare",
        }
    
        # Setup cache (initially empty, then populated)
        cached_data = {
            "card_number": "LOB-001",
            "tcgplayer_price": 25.99,
            "last_price_updt": datetime.now(timezone.utc),
        }
        mock_cache_collection.find_one.side_effect = [None, cached_data]
        mock_cache_collection.update_one.return_value = Mock(modified_count=1)
    
        # Setup scraping response
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = '&lt;div class="price-point__data"&gt;$25.99&lt;/div&gt;'
        mock_requests_get.return_value = mock_response
    
        service = PriceScrapingService()
    
        # 1. First scrape (cache miss)
        result1 = service.scrape_card_price("LOB-001", "Blue-Eyes White Dragon", "Ultra Rare")
&gt;       assert result1["success"] is True
E       assert False is True

tests/integration/test_integration.py:379: AssertionError</failure></testcase><testcase classname="tests.integration.test_integration.TestConfigurationIntegration" name="test_app_configuration_integration" time="0.024" /><testcase classname="tests.integration.test_integration.TestConfigurationIntegration" name="test_database_configuration_integration" time="0.003" /><testcase classname="tests.integration.test_integration.TestMemoryManagement" name="test_memory_monitoring_integration" time="0.197" /><testcase classname="tests.integration.test_integration.TestMemoryManagement" name="test_memory_cleanup_integration" time="0.210"><failure message="AssertionError: Expected 'collect' to have been called.">self = &lt;test_integration.TestMemoryManagement object at 0x105b54a50&gt;
mock_gc_collect = &lt;MagicMock name='collect' id='4574477152'&gt;
client = &lt;FlaskClient &lt;Flask 'ygoapi.app'&gt;&gt;

    @patch("ygoapi.memory_manager.gc.collect")
    def test_memory_cleanup_integration(self, mock_gc_collect, client):
        """Test memory cleanup integration."""
        mock_gc_collect.return_value = 0
    
        # Test memory cleanup endpoint
        response = client.post("/memory/cleanup")
        assert response.status_code == 200
        data = response.get_json()
        assert data["success"] is True
    
        # Verify cleanup was called
&gt;       mock_gc_collect.assert_called()

tests/integration/test_integration.py:448: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MagicMock name='collect' id='4574477152'&gt;

    def assert_called(self):
        """assert that the mock was called at least once
        """
        if self.call_count == 0:
            msg = ("Expected '%s' to have been called." %
                   (self._mock_name or 'mock'))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'collect' to have been called.

/opt/homebrew/Cellar/python@3.13/3.13.3_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:948: AssertionError</failure></testcase><testcase classname="tests.integration.test_integration.TestPerformanceIntegration" name="test_response_time_tracking" time="0.355" /><testcase classname="tests.integration.test_integration.TestPerformanceIntegration" name="test_rate_limiting_integration" time="0.241" /><testcase classname="tests.integration.test_integration.TestSecurityIntegration" name="test_input_sanitization_integration" time="6.778" /><testcase classname="tests.integration.test_integration.TestSecurityIntegration" name="test_image_proxy_security_integration" time="0.327" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_create_app_default_config" time="0.021" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_create_app_registers_routes" time="0.007" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_create_app_cors_enabled" time="0.020" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_health_endpoint_available" time="0.022" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_404_error_handler" time="0.023" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_memory_manager_integration" time="0.028" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_database_connection_handling" time="0.024" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_config_validation" time="0.023" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_config_validation_failure" time="0.005" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_app_context_creation" time="0.021" /><testcase classname="tests.unit.test_app.TestAppCreation" name="test_request_context_creation" time="0.023" /><testcase classname="tests.unit.test_app.TestRunApp" name="test_run_app_debug_mode" time="0.007" /><testcase classname="tests.unit.test_app.TestRunApp" name="test_run_app_production_mode" time="0.026" /><testcase classname="tests.unit.test_app.TestDatabaseIntegration" name="test_app_creation_with_failed_database_allowed" time="0.021" /><testcase classname="tests.unit.test_app.TestDatabaseIntegration" name="test_app_creation_with_failed_database_not_allowed" time="0.007" /><testcase classname="tests.unit.test_app.TestLogging" name="test_logging_configuration" time="0.023" /><testcase classname="tests.unit.test_app.TestRouteRegistration" name="test_api_endpoints_registered" time="0.020" /><testcase classname="tests.unit.test_app.TestRouteRegistration" name="test_route_logging" time="0.024" /><testcase classname="tests.unit.test_app.TestCORSConfiguration" name="test_cors_origins" time="0.021" /><testcase classname="tests.unit.test_app.TestCORSConfiguration" name="test_cors_methods" time="0.022" /><testcase classname="tests.unit.test_app.TestErrorScenarios" name="test_500_error_handling" time="0.034" /><testcase classname="tests.unit.test_app.TestErrorScenarios" name="test_method_not_allowed" time="0.024" /><testcase classname="tests.unit.test_app.TestAppConfiguration" name="test_debug_mode_configuration" time="0.022" /><testcase classname="tests.unit.test_app.TestAppConfiguration" name="test_port_configuration" time="0.021" /><testcase classname="tests.unit.test_card_services.TestCardSetService" name="test_fetch_all_card_sets_success" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardSetService" name="test_fetch_all_card_sets_api_error" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardSetService" name="test_fetch_all_card_sets_network_error" time="0.003" /><testcase classname="tests.unit.test_card_services.TestCardSetService" name="test_upload_card_sets_to_cache_success" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardSetService" name="test_get_cached_card_sets_success" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardSetService" name="test_get_cached_card_sets_database_disabled" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardSetService" name="test_get_card_sets_count_success" time="0.005" /><testcase classname="tests.unit.test_card_services.TestCardSetService" name="test_search_card_sets_success" time="0.006" /><testcase classname="tests.unit.test_card_services.TestCardVariantService" name="test_fetch_cards_from_set_success" time="0.005" /><testcase classname="tests.unit.test_card_services.TestCardVariantService" name="test_fetch_cards_from_set_not_found" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardVariantService" name="test_fetch_cards_from_set_api_error" time="0.005" /><testcase classname="tests.unit.test_card_services.TestCardVariantService" name="test_create_card_variants_success" time="0.012" /><testcase classname="tests.unit.test_card_services.TestCardVariantService" name="test_create_card_variants_empty_input" time="0.003" /><testcase classname="tests.unit.test_card_services.TestCardVariantService" name="test_create_card_variants_malformed_data" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardVariantService" name="test_upload_card_variants_to_cache_success" time="0.110" /><testcase classname="tests.unit.test_card_services.TestCardVariantService" name="test_get_cached_card_variants_success" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardLookupService" name="test_lookup_card_info_from_cache_success" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardLookupService" name="test_lookup_card_info_from_cache_not_found" time="0.003" /><testcase classname="tests.unit.test_card_services.TestCardLookupService" name="test_lookup_card_info_from_cache_database_error" time="0.003" /><testcase classname="tests.unit.test_card_services.TestCardLookupService" name="test_lookup_card_name_from_ygo_api_success" time="0.004" /><testcase classname="tests.unit.test_card_services.TestCardLookupService" name="test_lookup_card_name_from_ygo_api_not_found" time="0.003" /><testcase classname="tests.unit.test_card_services.TestCardLookupService" name="test_lookup_card_name_from_ygo_api_network_error" time="0.003" /><testcase classname="tests.unit.test_card_services.TestServiceInstances" name="test_service_instances_exist" time="0.002" /><testcase classname="tests.unit.test_card_services.TestServiceInstances" name="test_service_instances_have_memory_manager" time="0.002" /><testcase classname="tests.unit.test_card_services.TestIntegrationScenarios" name="test_complete_card_set_workflow" time="0.004" /><testcase classname="tests.unit.test_card_services.TestIntegrationScenarios" name="test_error_handling_cascade" time="0.003" /><testcase classname="tests.unit.test_database" name="test_database_connection" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_init" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_client_success" time="0.007" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_client_connection_failure_with_fallback" time="0.004" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_client_total_failure" time="0.004" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_client_disabled" time="0.004" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_client_cached" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_database_success" time="0.004" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_database_client_none" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_database_disabled" time="0.004" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_database_cached" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_collection_success" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_collection_database_none" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_card_sets_collection" time="0.004" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_card_sets_collection_disabled" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_cleanup_connections" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_cleanup_connections_with_exception" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_close" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_test_connection_success" time="0.005" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_test_connection_failure" time="0.004" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_test_connection_disabled" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_connection_context_manager" time="0.004" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_connection_disabled" time="0.004" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_database_context" time="0.003" /><testcase classname="tests.unit.test_database.TestDatabaseManager" name="test_get_collection_context" time="0.004" /><testcase classname="tests.unit.test_database.TestGlobalFunctions" name="test_get_database_manager_singleton" time="0.002" /><testcase classname="tests.unit.test_database.TestGlobalFunctions" name="test_get_mongo_client" time="0.003" /><testcase classname="tests.unit.test_database.TestGlobalFunctions" name="test_get_database_function" time="0.003" /><testcase classname="tests.unit.test_database.TestGlobalFunctions" name="test_get_collection_function" time="0.003" /><testcase classname="tests.unit.test_database.TestGlobalFunctions" name="test_get_card_sets_collection_function" time="0.002" /><testcase classname="tests.unit.test_database.TestGlobalFunctions" name="test_get_card_variants_collection_function" time="0.003" /><testcase classname="tests.unit.test_database.TestGlobalFunctions" name="test_get_price_cache_collection_function" time="0.003" /><testcase classname="tests.unit.test_database.TestGlobalFunctions" name="test_close_database_connections" time="0.003" /><testcase classname="tests.unit.test_database.TestGlobalFunctions" name="test_test_database_connection_function" time="0.002" /><testcase classname="tests.unit.test_database.TestErrorHandling" name="test_connection_timeout_error" time="0.005" /><testcase classname="tests.unit.test_database.TestErrorHandling" name="test_ssl_error_handling" time="0.003" /><testcase classname="tests.unit.test_database.TestMemoryManagement" name="test_memory_manager_callback_registration" time="0.003" /><testcase classname="tests.unit.test_database.TestMemoryManagement" name="test_memory_monitoring_decorators" time="0.004" /><testcase classname="tests.unit.test_database.TestContextManagers" name="test_get_connection_context_manager_cleanup" time="0.004" /><testcase classname="tests.unit.test_models.TestPyObjectId" name="test_valid_object_id" time="0.002" /><testcase classname="tests.unit.test_models.TestPyObjectId" name="test_valid_object_id_string" time="0.005" /><testcase classname="tests.unit.test_models.TestPyObjectId" name="test_invalid_object_id" time="0.002" /><testcase classname="tests.unit.test_models.TestPyObjectId" name="test_validators_generator" time="0.002" /><testcase classname="tests.unit.test_models.TestPyObjectId" name="test_pydantic_json_schema" time="0.003" /><testcase classname="tests.unit.test_models.TestCardPriceModel" name="test_valid_card_price_model" time="0.003" /><testcase classname="tests.unit.test_models.TestCardPriceModel" name="test_card_price_model_with_art_variant" time="0.002" /><testcase classname="tests.unit.test_models.TestCardPriceModel" name="test_card_price_model_optional_fields" time="0.002" /><testcase classname="tests.unit.test_models.TestCardPriceModel" name="test_card_price_model_missing_required_field" time="0.005" /><testcase classname="tests.unit.test_models.TestCardPriceModel" name="test_card_price_model_json_serialization" time="0.003" /><testcase classname="tests.unit.test_models.TestCardSetModel" name="test_valid_card_set_model" time="0.003" /><testcase classname="tests.unit.test_models.TestCardSetModel" name="test_card_set_model_optional_fields" time="0.004" /><testcase classname="tests.unit.test_models.TestCardSetModel" name="test_card_set_model_with_metadata" time="0.006" /><testcase classname="tests.unit.test_models.TestCardSetModel" name="test_card_set_model_invalid_num_cards" time="0.005" /><testcase classname="tests.unit.test_models.TestCardVariantModel" name="test_valid_card_variant_model" time="0.003" /><testcase classname="tests.unit.test_models.TestCardVariantModel" name="test_card_variant_model_def_alias" time="0.003" /><testcase classname="tests.unit.test_models.TestCardVariantModel" name="test_card_variant_model_with_set_info" time="0.003" /><testcase classname="tests.unit.test_models.TestCardVariantModel" name="test_card_variant_model_with_linkmarkers" time="0.004" /><testcase classname="tests.unit.test_models.TestCardVariantModel" name="test_card_variant_model_missing_required_fields" time="0.003" /><testcase classname="tests.unit.test_models.TestCardModel" name="test_valid_card_model" time="0.003" /><testcase classname="tests.unit.test_models.TestCardModel" name="test_card_model_with_card_sets" time="0.003" /><testcase classname="tests.unit.test_models.TestCardModel" name="test_card_model_with_images_and_prices" time="0.002" /><testcase classname="tests.unit.test_models.TestCardModel" name="test_card_model_required_fields_only" time="0.003" /><testcase classname="tests.unit.test_models.TestProcessingStats" name="test_valid_processing_stats" time="0.006" /><testcase classname="tests.unit.test_models.TestProcessingStats" name="test_processing_stats_with_errors" time="0.004" /><testcase classname="tests.unit.test_models.TestProcessingStats" name="test_processing_stats_defaults" time="0.007" /><testcase classname="tests.unit.test_models.TestPriceScrapingRequest" name="test_valid_price_scraping_request" time="0.005" /><testcase classname="tests.unit.test_models.TestPriceScrapingRequest" name="test_price_scraping_request_defaults" time="0.007" /><testcase classname="tests.unit.test_models.TestPriceScrapingRequest" name="test_price_scraping_request_missing_fields" time="0.004" /><testcase classname="tests.unit.test_models.TestPriceScrapingResponse" name="test_valid_price_scraping_response" time="0.004" /><testcase classname="tests.unit.test_models.TestPriceScrapingResponse" name="test_price_scraping_response_error" time="0.006" /><testcase classname="tests.unit.test_models.TestPriceScrapingResponse" name="test_price_scraping_response_json_serialization" time="0.004" /><testcase classname="tests.unit.test_models.TestMemoryStats" name="test_valid_memory_stats" time="0.004" /><testcase classname="tests.unit.test_models.TestMemoryStats" name="test_memory_stats_invalid_types" time="0.004" /><testcase classname="tests.unit.test_models.TestModelValidation" name="test_extra_fields_ignored" time="0.004" /><testcase classname="tests.unit.test_models.TestModelValidation" name="test_model_dict_conversion" time="0.004" /><testcase classname="tests.unit.test_models.TestModelValidation" name="test_model_copy" time="0.004" /><testcase classname="tests.unit.test_models.TestModelValidation" name="test_model_update" time="0.003" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_init_with_disabled_db" time="0.006" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_validate_card_rarity_success" time="0.006" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_validate_card_rarity_not_found" time="0.006" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_validate_card_rarity_disabled_db" time="0.009" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_lookup_card_name_success" time="0.008" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_lookup_card_name_not_found" time="0.006" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_find_cached_price_data_success" time="0.010" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_find_cached_price_data_not_found" time="0.005" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_get_cache_stats_success" time="0.005" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_get_cache_stats_disabled_db" time="0.007" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_scrape_card_price_success" time="0.006" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_scrape_card_price_cached" time="0.003" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_scrape_card_price_request_failure" time="0.007" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_scrape_card_price_invalid_rarity" time="0.006" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_save_price_to_cache_success" time="0.006" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingService" name="test_save_price_to_cache_disabled_db" time="0.005" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingIntegration" name="test_complete_scraping_workflow" time="0.007" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingIntegration" name="test_cache_hit_workflow" time="0.005" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingErrorHandling" name="test_network_timeout_handling" time="0.005" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingErrorHandling" name="test_invalid_html_handling" time="0.006" /><testcase classname="tests.unit.test_price_scraping.TestPriceScrapingErrorHandling" name="test_http_error_handling" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestArtVariantHandling" name="test_normalize_art_variant_numbered_variants" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestArtVariantHandling" name="test_normalize_art_variant_ordinal_suffixes" time="0.008" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestArtVariantHandling" name="test_normalize_art_variant_word_numbers" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestArtVariantHandling" name="test_get_art_variant_alternatives_generation" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestArtVariantHandling" name="test_get_art_variant_alternatives_empty_input" time="0.004" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestArtVariantHandling" name="test_normalize_art_variant_edge_cases" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestArtVariantHandling" name="test_normalize_art_variant_named_variants" time="0.003" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestArtVariantHandling" name="test_art_variant_cache_lookup_optimization" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestRarityValidation" name="test_validate_card_rarity_database_mocking" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestRarityValidation" name="test_are_rarities_equivalent_special_cases" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestRarityValidation" name="test_validate_card_rarity_database_connection_failure" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestRarityValidation" name="test_validate_card_rarity_missing_card_scenarios" time="0.007" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestRarityValidation" name="test_rarity_validation_normalization_edge_cases" time="0.007" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestCacheOperations" name="test_find_cached_price_data_query_combinations" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestCacheOperations" name="test_cache_ttl_expiration_and_freshness" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestCacheOperations" name="test_save_price_data_with_art_variants" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestCacheOperations" name="test_cache_collection_initialization_edge_cases" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestCacheOperations" name="test_cache_stats_and_memory_optimization" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestCacheOperations" name="test_art_variant_alternative_matching_in_cache" time="0.004" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestTCGPlayerScrapingLogic" name="test_select_best_tcgplayer_variant_scoring" time="0.008" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestTCGPlayerScrapingLogic" name="test_select_best_variant_with_art_versions" time="0.011" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestTCGPlayerScrapingLogic" name="test_playwright_page_interaction_mocking" time="0.010" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestTCGPlayerScrapingLogic" name="test_variant_selection_algorithm_edge_cases" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestTCGPlayerScrapingLogic" name="test_timeout_and_error_handling_scenarios" time="0.008" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestTCGPlayerScrapingLogic" name="test_extract_prices_from_tcgplayer_dom" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestTCGPlayerScrapingLogic" name="test_malformed_html_parsing_resilience" time="0.007" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestIntegrationScenarios" name="test_service_initialization_edge_cases" time="0.004" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestIntegrationScenarios" name="test_end_to_end_scraping_with_mocked_dependencies" time="0.011" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestIntegrationScenarios" name="test_memory_cleanup_and_playwright_resource_management" time="0.133" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestIntegrationScenarios" name="test_concurrent_scraping_scenarios" time="0.014" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestIntegrationScenarios" name="test_verify_side_effects_cache_saves_logging" time="0.008" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestPriceScrapingService" name="test_validate_card_rarity_success" time="0.008" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestErrorHandlingEnhancements" name="test_fix_failing_rarity_validation_database_mocking" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestErrorHandlingEnhancements" name="test_fix_failing_art_variant_cache_lookup" time="0.004" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestErrorHandlingEnhancements" name="test_fix_failing_service_initialization_edge_cases" time="0.004" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_initialization_with_index_creation" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_initialization_with_existing_indexes" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_lookup_card_info_from_cache_broad_search" time="0.008" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_lookup_card_name_from_ygo_api_success" time="0.007" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_lookup_card_name_from_ygo_api_failure" time="0.007" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_lookup_card_name_combined" time="0.007" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_scrape_price_from_tcgplayer_basic_no_results" time="0.014" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_scrape_price_from_tcgplayer_basic_product_page_direct" time="0.014" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_scrape_price_from_tcgplayer_basic_with_art_variant_search" time="0.020" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_scrape_price_from_tcgplayer_basic_no_suitable_variant" time="0.012" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_scrape_card_price_force_refresh" time="0.008" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_scrape_card_price_with_art_variant" time="0.010" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_scrape_card_price_exception_handling" time="0.010" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_save_price_data_no_changes" time="0.008" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_save_price_data_exception_handling" time="0.005" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_get_cache_stats_with_fresh_stale_calculation" time="0.007" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_get_cache_stats_exception_handling" time="0.006" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_cleanup_playwright_with_exceptions" time="0.108" /><testcase classname="tests.unit.test_price_scraping_enhanced.TestAdditionalCoverageEnhancements" name="test_cleanup_playwright_without_resources" time="0.076" /><testcase classname="tests.unit.test_routes.TestRouteRegistration" name="test_register_routes" time="0.019" /><testcase classname="tests.unit.test_routes.TestHealthCheck" name="test_health_check_success" time="0.211" /><testcase classname="tests.unit.test_routes.TestCardPriceEndpoint" name="test_scrape_card_price_success" time="0.231" /><testcase classname="tests.unit.test_routes.TestCardPriceEndpoint" name="test_scrape_card_price_missing_json" time="0.180" /><testcase classname="tests.unit.test_routes.TestCardPriceEndpoint" name="test_scrape_card_price_missing_required_fields" time="0.297" /><testcase classname="tests.unit.test_routes.TestCardPriceEndpoint" name="test_scrape_card_price_empty_rarity" time="0.154" /><testcase classname="tests.unit.test_routes.TestCardPriceEndpoint" name="test_scrape_card_price_invalid_rarity" time="0.195" /><testcase classname="tests.unit.test_routes.TestCardPriceEndpoint" name="test_scrape_card_price_with_art_variant" time="0.264" /><testcase classname="tests.unit.test_routes.TestCardPriceEndpoint" name="test_scrape_card_price_cached_response" time="0.425" /><testcase classname="tests.unit.test_routes.TestCardPriceEndpoint" name="test_scrape_card_price_not_found" time="0.195" /><testcase classname="tests.unit.test_routes.TestCardPriceEndpoint" name="test_scrape_card_price_server_error" time="0.188" /><testcase classname="tests.unit.test_routes.TestPriceCacheStatsEndpoint" name="test_get_price_cache_stats_success" time="0.261" /><testcase classname="tests.unit.test_routes.TestPriceCacheStatsEndpoint" name="test_get_price_cache_stats_error" time="0.162" /><testcase classname="tests.unit.test_routes.TestCardSetsEndpoints" name="test_get_all_card_sets_success" time="0.199" /><testcase classname="tests.unit.test_routes.TestCardSetsEndpoints" name="test_search_card_sets_success" time="0.180" /><testcase classname="tests.unit.test_routes.TestCardSetsEndpoints" name="test_upload_card_sets_success" time="0.335" /><testcase classname="tests.unit.test_routes.TestCardSetsEndpoints" name="test_get_card_sets_from_cache_success" time="0.162" /><testcase classname="tests.unit.test_routes.TestCardSetsEndpoints" name="test_get_card_sets_count_success" time="0.187" /><testcase classname="tests.unit.test_routes.TestCardSetsCardsEndpoint" name="test_get_cards_from_specific_set_success" time="0.322" /><testcase classname="tests.unit.test_routes.TestCardSetsCardsEndpoint" name="test_get_cards_from_specific_set_not_found" time="0.215" /><testcase classname="tests.unit.test_routes.TestCardSetsCardsEndpoint" name="test_get_cards_from_specific_set_with_params" time="0.190" /><testcase classname="tests.unit.test_routes.TestCardVariantsEndpoints" name="test_upload_card_variants_success" time="0.209" /><testcase classname="tests.unit.test_routes.TestCardVariantsEndpoints" name="test_get_card_variants_from_cache_success" time="0.300" /><testcase classname="tests.unit.test_routes.TestMemoryEndpoints" name="test_get_memory_statistics_success" time="0.232" /><testcase classname="tests.unit.test_routes.TestMemoryEndpoints" name="test_force_memory_cleanup_success" time="0.163" /><testcase classname="tests.unit.test_routes.TestDebugEndpoints" name="test_debug_cache_lookup_success" time="0.352" /><testcase classname="tests.unit.test_routes.TestDebugEndpoints" name="test_debug_art_extraction_success" time="0.261" /><testcase classname="tests.unit.test_routes.TestImageProxyEndpoints" name="test_proxy_card_image_missing_url" time="0.230" /><testcase classname="tests.unit.test_routes.TestImageProxyEndpoints" name="test_proxy_card_image_invalid_domain" time="0.257" /><testcase classname="tests.unit.test_routes.TestImageProxyEndpoints" name="test_proxy_card_image_success" time="0.375" /><testcase classname="tests.unit.test_routes.TestImageProxyEndpoints" name="test_proxy_card_image_timeout" time="0.390" /><testcase classname="tests.unit.test_routes.TestImageProxyEndpoints" name="test_get_card_image_by_id_success" time="0.268" /><testcase classname="tests.unit.test_routes.TestImageProxyEndpoints" name="test_get_card_image_by_id_with_proxy" time="0.386" /><testcase classname="tests.unit.test_routes.TestErrorHandlers" name="test_404_handler" time="0.242" /><testcase classname="tests.unit.test_routes.TestRateLimiting" name="test_image_proxy_rate_limiting" time="0.186" /><testcase classname="tests.unit.test_routes.TestRequestValidation" name="test_price_endpoint_force_refresh_conversion" time="0.227" /><testcase classname="tests.unit.test_routes.TestRequestValidation" name="test_art_variant_handling" time="0.375" /><testcase classname="tests.unit.test_routes.TestFetchAllCardsEndpoint" name="test_fetch_all_cards_simplified_response" time="0.214" /><testcase classname="tests.unit.test_utils.TestCardDataCleaning" name="test_clean_card_data_with_datetime" time="0.003" /><testcase classname="tests.unit.test_utils.TestCardDataCleaning" name="test_clean_card_data_with_none_values" time="0.003" /><testcase classname="tests.unit.test_utils.TestCardDataCleaning" name="test_clean_card_data_empty_dict" time="0.003" /><testcase classname="tests.unit.test_utils.TestCardNumberValidation" name="test_validate_card_number_valid_formats" time="0.004" /><testcase classname="tests.unit.test_utils.TestCardNumberValidation" name="test_validate_card_number_invalid_formats" time="0.003" /><testcase classname="tests.unit.test_utils.TestCardNumberValidation" name="test_extract_set_code_valid_numbers" time="0.002" /><testcase classname="tests.unit.test_utils.TestCardNumberValidation" name="test_extract_set_code_invalid_numbers" time="0.001" /><testcase classname="tests.unit.test_utils.TestRarityProcessing" name="test_normalize_rarity_basic" time="0.002" /><testcase classname="tests.unit.test_utils.TestRarityProcessing" name="test_normalize_rarity_abbreviations" time="0.003" /><testcase classname="tests.unit.test_utils.TestRarityProcessing" name="test_normalize_rarity_for_matching" time="0.003" /><testcase classname="tests.unit.test_utils.TestRarityProcessing" name="test_normalize_rarity_empty_input" time="0.002" /><testcase classname="tests.unit.test_utils.TestRarityProcessing" name="test_map_rarity_to_tcgplayer_filter" time="0.002" /><testcase classname="tests.unit.test_utils.TestArtVersionExtraction" name="test_extract_art_version_numbered_patterns" time="0.002" /><testcase classname="tests.unit.test_utils.TestArtVersionExtraction" name="test_extract_art_version_named_patterns" time="0.002" /><testcase classname="tests.unit.test_utils.TestArtVersionExtraction" name="test_extract_art_version_no_pattern" time="0.004" /><testcase classname="tests.unit.test_utils.TestArtVersionExtraction" name="test_normalize_art_variant" time="0.003" /><testcase classname="tests.unit.test_utils.TestBoosterSetExtraction" name="test_extract_booster_set_name_from_url" time="0.002" /><testcase classname="tests.unit.test_utils.TestBoosterSetExtraction" name="test_extract_booster_set_name_invalid_url" time="0.003" /><testcase classname="tests.unit.test_utils.TestSetCodeMapping" name="test_map_set_code_to_tcgplayer_name_success" time="0.003"><failure message="AssertionError: assert None == 'Legend of Blue Eyes White Dragon'">self = &lt;test_utils.TestSetCodeMapping object at 0x105f16d50&gt;
mock_get_database = &lt;MagicMock name='get_database' id='4582809216'&gt;

    @patch("ygoapi.database.get_database")
    def test_map_set_code_to_tcgplayer_name_success(self, mock_get_database):
        """Test successful set code to TCGPlayer name mapping."""
        # Create a proper mock database with __getitem__ support
        mock_collection = Mock()
        mock_collection.find_one.return_value = {
            "set_code": "LOB",
            "tcgplayer_name": "Legend of Blue Eyes White Dragon"
        }
    
        mock_db = Mock()
        mock_db.__getitem__ = Mock(return_value=mock_collection)
        mock_get_database.return_value = mock_db
    
        result = map_set_code_to_tcgplayer_name("LOB")
&gt;       assert result == "Legend of Blue Eyes White Dragon"
E       AssertionError: assert None == 'Legend of Blue Eyes White Dragon'

tests/unit/test_utils.py:285: AssertionError</failure></testcase><testcase classname="tests.unit.test_utils.TestSetCodeMapping" name="test_map_set_code_to_tcgplayer_name_fallback" time="0.003"><failure message="AssertionError: assert None == 'UNKNOWN'">self = &lt;test_utils.TestSetCodeMapping object at 0x105f16e90&gt;
mock_get_database = &lt;MagicMock name='get_database' id='4582803168'&gt;

    @patch("ygoapi.database.get_database")
    def test_map_set_code_to_tcgplayer_name_fallback(self, mock_get_database):
        """Test set code mapping with fallback to original code."""
        # Create a proper mock database with __getitem__ support
        mock_collection = Mock()
        mock_collection.find_one.return_value = None  # No mapping found
    
        mock_db = Mock()
        mock_db.__getitem__ = Mock(return_value=mock_collection)
        mock_get_database.return_value = mock_db
    
        result = map_set_code_to_tcgplayer_name("UNKNOWN")
&gt;       assert result == "UNKNOWN"  # Should return original code
E       AssertionError: assert None == 'UNKNOWN'

tests/unit/test_utils.py:299: AssertionError</failure></testcase><testcase classname="tests.unit.test_utils.TestSetCodeMapping" name="test_map_set_code_to_tcgplayer_name_invalid" time="0.002"><failure message="AttributeError: &lt;module 'ygoapi.utils' from '/Users/joseacosta/Desktop/BMAD/yugiohProjectBmad/tcg_ygoripper/ygoapi/utils.py'&gt; does not have the attribute 'get_database'">self = &lt;test_utils.TestSetCodeMapping object at 0x105be8c30&gt;

    def test_map_set_code_to_tcgplayer_name_invalid(self):
        """Test mapping with invalid set code."""
        # Skip database access and return None for invalid codes
&gt;       with patch("ygoapi.utils.get_database", return_value=None):

tests/unit/test_utils.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.13/3.13.3_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x11120e2b0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'ygoapi.utils' from '/Users/joseacosta/Desktop/BMAD/yugiohProjectBmad/tcg_ygoripper/ygoapi/utils.py'&gt; does not have the attribute 'get_database'

/opt/homebrew/Cellar/python@3.13/3.13.3_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: AttributeError</failure></testcase><testcase classname="tests.unit.test_utils.TestCardFiltering" name="test_filter_cards_by_set_exact_match" time="0.002" /><testcase classname="tests.unit.test_utils.TestCardFiltering" name="test_filter_cards_by_set_no_matches" time="0.002" /><testcase classname="tests.unit.test_utils.TestCardFiltering" name="test_filter_cards_by_set_case_insensitive" time="0.003" /><testcase classname="tests.unit.test_utils.TestCardFiltering" name="test_filter_cards_by_set_missing_card_sets" time="0.004" /><testcase classname="tests.unit.test_utils.TestUtilityHelpers" name="test_batch_process_generator" time="0.004" /><testcase classname="tests.unit.test_utils.TestUtilityHelpers" name="test_calculate_success_rate" time="0.003" /><testcase classname="tests.unit.test_utils.TestUtilityHelpers" name="test_generate_variant_id" time="0.005" /><testcase classname="tests.unit.test_utils.TestUtilityHelpers" name="test_is_cache_fresh" time="0.005" /><testcase classname="tests.unit.test_utils.TestUtilityHelpers" name="test_sanitize_string" time="0.003" /><testcase classname="tests.unit.test_utils.TestUtilityHelpers" name="test_parse_price_string" time="0.003" /><testcase classname="tests.unit.test_utils.TestUtilityHelpers" name="test_get_current_utc_datetime" time="0.002" /><testcase classname="tests.unit.test_utils.TestUtilityHelpers" name="test_format_datetime_for_api" time="0.003" /><testcase classname="tests.unit.test_utils.TestErrorHandling" name="test_functions_handle_none_input" time="0.004" /><testcase classname="tests.unit.test_utils.TestErrorHandling" name="test_functions_handle_empty_string_input" time="0.003" /><testcase classname="tests.unit.test_utils.TestErrorHandling" name="test_edge_cases_and_boundary_conditions" time="0.002" /><testcase classname="tests.unit.test_utils.TestPerformanceConsiderations" name="test_large_dataset_handling" time="0.003" /><testcase classname="tests.unit.test_utils.TestPerformanceConsiderations" name="test_repeated_operations" time="0.004" /></testsuite></testsuites>